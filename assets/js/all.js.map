{"version":3,"sources":["all.js","swiper.js"],"names":["resizeObserver","ResizeObserver","entries","forEach","entry","heightChanger","document","querySelector","style","height","contentRect","observe","header","sections","querySelectorAll","scrollRoot","direction","prevYPosition","item","options","rootMargin","offsetHeight","threshold","observer","IntersectionObserver","interSectionObserverCallback","isIntersecting","console","log","target","id","swiper","Swiper","pagination","el","navigation","nextEl","prevEl","scrollbar","draggable"],"mappings":";;AAAA,IAAMA,cAAc,GAAG,IAAIC,cAAJ,CAAmB,UAACC,OAAD,EAAa;AACrDA,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD,EAAW;AACvB,QAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAtB;AACAF,IAAAA,aAAa,CAACG,KAAd,CAAoBC,MAApB,GAA6BL,KAAK,CAACM,WAAN,CAAkBD,MAAlB,GAA2B,CAA3B,GAA+B,IAA5D;AACD,GAHH;AAIC,CALoB,CAAvB;AAMET,cAAc,CAACW,OAAf,CAAuBL,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAvB,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMK,MAAM,GAAGN,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAf;AACA,IAAMM,QAAQ,GAAGP,QAAQ,CAACQ,gBAAT,CAA0B,SAA1B,CAAjB;AACA,IAAMC,UAAU,GAAGT,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAnB;AACA,IAAIS,SAAS,GAAG,IAAhB;AACA,IAAIC,aAAa,GAAG,CAApB;AAEAJ,QAAQ,CAACV,OAAT,CAAiB,UAAAe,IAAI,EAAI;AACvB,MAAMC,OAAO,GAAE;AACCC,IAAAA,UAAU,YAAKR,MAAM,CAACS,YAAP,GAAsB,CAAC,CAA5B,OADX;AAECC,IAAAA,SAAS,EAAE;AAFZ,GAAf;AAIA,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,4BAAzB,EAAuDN,OAAvD,CAAjB;AACAI,EAAAA,QAAQ,CAACZ,OAAT,CAAiBO,IAAjB;AACD,CAPD;;AASA,SAASO,4BAAT,CAAsCvB,OAAtC,EAA8C;AAG5CA,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,KAAK,EAAI;AACvB,QAAGA,KAAK,CAACsB,cAAT,EAAyB;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAK,CAACyB,MAAN,CAAaC,EAAzB;AAA8B,KADlC,CAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GAXD;AAYD;;;AC/FH,IAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAW,SAAX,EAAsB;AACjC;AACAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,EAAE,EAAE;AADM,GAFqB;AAKjC;AACAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,MAAM,EAAE,qBADE;AAEVC,IAAAA,MAAM,EAAE;AAFE,GANqB;AAUjC;AACAC,EAAAA,SAAS,EAAE;AACTJ,IAAAA,EAAE,EAAE,mBADK;AAETK,IAAAA,SAAS,EAAE;AAFF;AAXsB,CAAtB,CAAf","file":"all.js","sourcesContent":["const resizeObserver = new ResizeObserver((entries) => {\n  entries.forEach((entry) => {\n      const heightChanger = document.querySelector('#navbar-filler')\n      heightChanger.style.height = entry.contentRect.height + 3 + 'px'\n    })\n  })\n  resizeObserver.observe(document.querySelector('#barWatcher'))\n\n  // const section =[\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\"]\n  // section.forEach(item=>{\n  //   const section + item = \n  // })\n  // const sectionOne = document.querySelector(\"#sectionOne\");\n  // const sectionTwo = document.querySelector(\"#sectionTwo\");\n  // const sectionThree = document.querySelector(\"#sectionThree\");\n  // const sectionFour = document.querySelector(\"#sectionFour\");\n  // const sectionFive = document.querySelector(\"#sectionFive\");\n  // const sectionSix = document.querySelector(\"#sectionSix\");\n  // const sectionSeven= document.querySelector(\"#sectionSeven\");\n  // const sectionEight = document.querySelector(\"#sectionEight\");\n    // const sections = [...document.querySelectorAll(\"section\")]\n    // console.log(sections);\n    // sections.forEach((item) => {\n    //   const item.id = document.querySelector(`'#'+${item}`)\n    //   console.log(item.id);\n    // })\n  \n  // const sectionOneOptions = {\n  //   rootMargin: \"-200px 0px 0px 0px\"\n  //   rootMargin: `${headerHeight}px`\n  // };\n  \n  // const sectionObserverCallback = new IntersectionObserver(function(\n  //   entries) {\n  //   entries.forEach(entry => {\n  //     if(entry.target.attributes[1].nodeValue === 'sectionOne' && !entry.isIntersecting){\n  //       console.log('sectionOne');\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionTwo' && !entry.isIntersecting){\n  //       console.log('sectionTwo');\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionThree' && !entry.isIntersecting){\n  //       console.log('sectionThree');\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionFour' && !entry.isIntersecting){\n  //       console.log('sectionFour');\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionFive' && !entry.isIntersecting){\n  //       console.log('sectionFive');\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionSix' && !entry.isIntersecting){\n  //       console.log('sectionSix');\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionSeven' && !entry.isIntersecting){\n  //       console.log('sectionSeven')\n  //     } else if(entry.target.attributes[1].nodeValue === 'sectionEight' && !entry.isIntersecting){\n  //       console.log('sectionEight');\n  //     }\n  //   });\n  // },\n  // sectionOneOptions);\n  \n  // sectionObserverCallback.observe(sectionOne);\n  // sectionObserverCallback.observe(sectionTwo);\n  // sectionObserverCallback.observe(sectionThree);\n  // sectionObserverCallback.observe(sectionFour);\n  // sectionObserverCallback.observe(sectionFive);\n  // sectionObserverCallback.observe(sectionSix);\n  // sectionObserverCallback.observe(sectionSeven);\n  // sectionObserverCallback.observe(sectionEight);\n\n  const header = document.querySelector(\"nav\");  \n  const sections = document.querySelectorAll(\"section\");\n  const scrollRoot = document.querySelector('.scroller');\n  let direction = 'up';\n  let prevYPosition = 0;\n  \n  sections.forEach(item => {\n    const options ={\n                    rootMargin: `${header.offsetHeight * -1}px`,\n                    threshold: 0\n                    }\n    const observer = new IntersectionObserver(interSectionObserverCallback, options);\n    observer.observe(item);\n  })\n  \n  function interSectionObserverCallback(entries){\n    \n\n    entries.forEach(entry => {\n      if(entry.isIntersecting) { console.log(entry.target.id) }\n\n      // if (scrollRoot.scrollTop > prevYPosition) {\n      //   direction = 'down'\n      //   console.log(direction);\n      // } else {\n      //   direction = 'up'\n      //   // console.log(scrollRoot);\n      //   console.log(direction);\n      // }\n    })\n  }","const swiper = new Swiper('.swiper', {\r\n    // 分頁   \r\n    pagination: {\r\n      el: '.swiper-pagination',\r\n    },\r\n    // 左右箭頭    \r\n    navigation: {\r\n      nextEl: '.swiper-button-next',\r\n      prevEl: '.swiper-button-prev',\r\n    },\r\n    // 滾動條\r\n    scrollbar: {\r\n      el: '.swiper-scrollbar',\r\n      draggable: true,\r\n    },\r\n  });"]}